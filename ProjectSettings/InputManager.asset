1 — What’s wrong with the current file
Legacy only It targets Unity’s pre‑2019.4 Input Manager. That system is frozen; new features (rebinds, multiple devices, composite bindings) live in the Input System package instead.

Duplication and clashes Horizontal, Vertical, Fire*, Debug Vertical/Horizontal each appear twice, once as Keyboard/Mouse (type = 0 or 1) and once as Joystick (type = 2). Duplicated names work but become ambiguous at runtime (Input.GetAxis("Horizontal") returns whichever definition Unity sees first).

Extreme gravity/sensitivity Values of 1000 force each button press to snap instantly to ±1, defeating smooth analogue feel and wasting joystick resolution.

No real dead‑zones Almost every stick entry sets dead = 0.19 (good) but the duplicates with type = 0 leave it at 0.001, which introduces wandering cursor when a pad is connected.

Missing device separation Modern pads expose XInput (Windows) / SDL (all platforms) layouts. The file treats every stick as joyNum = 0 instead of “any” or specific devices, preventing multi‑controller couch play.

Hard‑wired debug hotkeys Release builds will ship with left ctrl + backspace etc. still active.

2 — Modernised upgrade
A. Migrate to the Input System package
Install & enable via Package Manager → Input System 1.9 (or latest).

Remove the legacy InputManager.asset entries (or ignore them—they coexist harmlessly).

Create an Input Actions asset (Assets/Controls.inputactions) with these control schemes:

Keyboard & Mouse

Gamepad (XInput / DualShock / Switch Pro)

Touch (optional)

Example JSON excerpt (only the part you actually paste into Controls.inputactions is inside the brown fence):

jsonc
Copy
{
  "maps": [
    {
      "name": "Player",
      "actions": [
        { "name": "Move",       "type": "Value", "expectedControlType": "Vector2" },
        { "name": "Look",       "type": "Value", "expectedControlType": "Vector2" },
        { "name": "FirePrimary","type": "Button" },
        { "name": "FireAlt",    "type": "Button" },
        { "name": "Jump",       "type": "Button" }
      ],
      "bindings": [
        // Move -------------------------------------------------
        { "path": "<Gamepad>/leftStick",        "action": "Move", "groups": "Gamepad"},
        { "path": "2DVector",                   "action": "Move", "isComposite": true, "groups": "Keyboard&Mouse"},
        { "path": "<Keyboard>/w", "name": "up", "isPartOfComposite": true },
        { "path": "<Keyboard>/s", "name": "down","isPartOfComposite": true },
        { "path": "<Keyboard>/a", "name": "left","isPartOfComposite": true },
        { "path": "<Keyboard>/d", "name": "right","isPartOfComposite": true },

        // Look -------------------------------------------------
        { "path": "<Mouse>/delta",              "action": "Look", "groups": "Keyboard&Mouse"},
        { "path": "<Gamepad>/rightStick",       "action": "Look", "groups": "Gamepad"},

        // Fire -------------------------------------------------
        { "path": "<Mouse>/leftButton",         "action": "FirePrimary", "groups": "Keyboard&Mouse"},
        { "path": "<Gamepad>/rightTrigger",     "action": "FirePrimary", "groups": "Gamepad"},
        { "path": "<Mouse>/rightButton",        "action": "FireAlt",     "groups": "Keyboard&Mouse"},
        { "path": "<Gamepad>/leftTrigger",      "action": "FireAlt",     "groups": "Gamepad"},

        // Jump -------------------------------------------------
        { "path": "<Keyboard>/space",           "action": "Jump", "groups": "Keyboard&Mouse"},
        { "path": "<Gamepad>/buttonSouth",      "action": "Jump", "groups": "Gamepad"}
      ]
    }
  ],
  "controlSchemes": [
    { "name": "Keyboard&Mouse", "bindingGroup": "Keyboard&Mouse",
      "devices": ["<Keyboard>", "<Mouse>"] },
    { "name": "Gamepad",        "bindingGroup": "Gamepad",
      "devices": ["<Gamepad>"] }
  ]
}
(Paste the JSON using the Input Actions editor’s “Import” button or copy the text into the generated .inputactions file.)

Runtime usage (example MonoBehaviour):

csharp
Copy
public class PlayerInputHandler : MonoBehaviour, Controls.IPlayerActions
{
    Controls controls;

    void Awake()
    {
        controls = new Controls();
        controls.Player.SetCallbacks(this);
    }

    void OnEnable()  => controls.Enable();
    void OnDisable() => controls.Disable();

    public void OnMove(InputAction.CallbackContext ctx)  { move = ctx.ReadValue<Vector2>(); }
    public void OnLook(InputAction.CallbackContext ctx)  { look = ctx.ReadValue<Vector2>(); }
    public void OnFirePrimary(InputAction.CallbackContext ctx)
    {
        if (ctx.performed) Gun.Fire();
    }
    // …
}
B. If you must stay on Input Manager
Replace your file with the cleaned‑up YAML below. Changes:

remove duplicates

set sensible gravity/sensitivity (6 on buttons; 0 on axes)

add 0.2 dead‑zone on sticks

allow any joystick device (joyNum = 0 in axis mode already means “any”)

yaml
Copy
%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!13 &1
InputManager:
  m_ObjectHideFlags: 0
  serializedVersion: 2
  m_Axes:
  # ─────────── Keyboard / Mouse ───────────
  - serializedVersion: 3
    m_Name: Horizontal
    negativeButton: a
    positiveButton: d
    gravity: 6
    dead: 0.001
    sensitivity: 6
    snap: 1
    type: 0   # keyboard
    axis: 0
  - serializedVersion: 3
    m_Name: Vertical
    negativeButton: s
    positiveButton: w
    gravity: 6
    dead: 0.001
    sensitivity: 6
    snap: 1
    type: 0
    axis: 0
  - serializedVersion: 3
    m_Name: Mouse X
    sensitivity: 0.1
    type: 1   # mouse
    axis: 0
  - serializedVersion: 3
    m_Name: Mouse Y
    sensitivity: 0.1
    invert: 1
    type: 1
    axis: 1
  - serializedVersion: 3
    m_Name: Fire
    positiveButton: mouse 0
    altPositiveButton: left ctrl
    gravity: 1000
    sensitivity: 1000
    type: 0

  # ─────────── Gamepad (any) ───────────
  - serializedVersion: 3
    m_Name: Gamepad Horizontal
    dead: 0.2
    sensitivity: 1
    type: 2   # joystick axis
    axis: 0
  - serializedVersion: 3
    m_Name: Gamepad Vertical
    dead: 0.2
    sensitivity: 1
    invert: 1
    type: 2
    axis: 1
  - serializedVersion: 3
    m_Name: Gamepad Fire
    positiveButton: joystick button 0
    gravity: 1000
    sensitivity: 1000
    type: 0

  # ─────────── UI ───────────
  - serializedVersion: 3
    m_Name: Submit
    positiveButton: return
    altPositiveButton: joystick button 0
    type: 0
  - serializedVersion: 3
    m_Name: Cancel
    positiveButton: escape
    altPositiveButton: joystick button 1
    type: 0
C. Extra polish ideas (works for both systems)
Run‑time re‑bind menu — Expose InputActionRebindingExtensions.PerformInteractiveRebinding() (new system) or a custom PlayerPrefs overlay (legacy) so players can map controls in‑game.

Context‑sensitive cursor lock — Lock and hide the mouse while playing; unlock in inventory or pause menu.

Sensitivity sliders for camera & stick; just multiply Look vectors by user‑saved preference.

Platform‑aware prompts — Swap “Press <kbd>A</kbd> to jump” for gamepad glyphs by checking Gamepad.current != null.

Migrating to the Input System gives you hot‑plugging, Steam Deck support, split‑screen with mixed devices and ready‑made UI widgets for rebinding—all without fighting the ageing YAML format.
